---
import { seasonOne, episodes, getStoryDuration } from "./data/episodes";

const { storyNumber = 1 } = Astro.props;
---


<section class="story">
  <div class="legend">
    <h1 class="header">Dischordian Saga: {seasonOne[storyNumber - 1].storyTitle} - Episode {seasonOne[storyNumber - 1].episode}</h1>
    <h2 class="duration">{getStoryDuration(storyNumber - 1)}</h2>
  </div>
  <div class="text">
    {seasonOne[storyNumber - 1].storyText.map((paragraph) => (
      <p class="story-p">{paragraph}</p>
    ))}
  </div>
  <ul class="options">
    {seasonOne[storyNumber - 1].storyOptions.map((option) => (
      <li class="option">{option}</li>
    ))}
  </ul>

  <span class="voting-ended"></span>
</section>


<section class="other-episodes">
  <img class="story-nodes-icon" src="/public/governanceHubAssets/episodesPCOpen.png" data-episodes={episodes} />
  <div class="story-nodes-container">
    <div class="story-nodes-legend">Dischordian Saga</div>
    <div class="story-nodes">
      {episodes.map((episode) => (
        <div class="story-node-tile">
          <img class="story-node-image" src={episode.image} />
          <p class="story-node-title">{episode.title}</p>
        </div>
      ))}
    </div>
  </div>
</section>


<script>
  import { episodesPanel, otherEpisodesIcon } from "./data/panels";
  import { seasonOne, episodes, getStoryDuration } from "./data/episodes";

  const header = document.querySelector('.header');
  const duration = document.querySelector('.duration');
  const video = document.getElementById('youtube');
  const text = document.querySelector('.text');
  const options = document.querySelector('.options');

  const storyNodeTiles = document.querySelectorAll('.story-node-tile');

  otherEpisodesIcon.addEventListener('click', () => {
    if(episodesPanel.panelState) {
      episodesPanel.close();
    } else {
      episodesPanel.open();
    }
  })

  storyNodeTiles.forEach((tile, i) => {
    tile.addEventListener('mouseover', () => {
      if(!episodes[i].active) {
        tile.style.backgroundColor = 'rgba(51, 226, 230, 0.5)';
        tile.style.color = '#33E2E6';
        tile.style.filter = 'none';
      }
    })
    tile.addEventListener('mouseout', () => {
      if(!episodes[i].active) {
        tile.style.backgroundColor = 'rgba(51, 226, 230, 0.4)';
        tile.style.color = 'inherit';
        tile.style.filter = 'none';
      }
    })
    tile.addEventListener('click', () => {
      if(!episodes[i].active) {activeEpisode(i)}
    })
  })

  // Make selected episode active
  function activeEpisode(i) {
    storyNodeTiles[i].style.color = '#010020';
    storyNodeTiles[i].style.filter = 'drop-shadow(0 0 1vw rgba(51, 226, 230, 0.8))';
    inactiveEpisodes();
    episodes[i].active = true;
    updateStory(i + 1);
  }

  // Make inactive all other tiles
  function inactiveEpisodes() {
    storyNodeTiles.forEach((tile, i) => {
      if(episodes[i].active) {
        episodes[i].active = false;
        tile.style.backgroundColor = 'rgba(51, 226, 230, 0.4)';
        tile.style.color = 'inherit';
        tile.style.filter = 'none';
      }
    })
  }

  // Render new story
  function updateStory(number) {
    header.innerHTML = 'Dischordian Saga: ' + seasonOne[number].storyTitle + ' - Episode ' + number;
    duration.innerHTML = getStoryDuration(number);
    video.src = `https://www.youtube.com/embed/${seasonOne[number].videoLink}`;

    let html = '';
    seasonOne[number].storyText.forEach((paragraph) => {
      html += `<p class="story-p">${paragraph}</p>`
    })
    text.innerHTML = html;

    html = '';
    seasonOne[number].storyOptions.forEach((option) => {
      html += `<li class="option">${option}</li>`;
    })
    options.innerHTML = html;
  }
</script>


<style>
  .story-nodes-icon {
    position: fixed;
    z-index: 19;
    top: 0;
    left: 0;
    height: auto;
    width: 20vw;
    filter: drop-shadow(0.1vw 0.1vw 0.5vw #010020);
    cursor: pointer;
  }

  .story-nodes-container {
    position: fixed;
    z-index: 18;
    top: 0;
    left: -44vw;
    height: 100%;
    width: 40vw;
    display: flex;
    flex-flow: column nowrap;
    background-image: url('/public/GovernanceHubAssets/sideBorder.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-color: rgba(1, 0, 32, 0.5);
    background-position: right;
    -webkit-backdrop-filter: blur(1vw);
    backdrop-filter: blur(1vw);
    filter: drop-shadow(-0.1vw 0.1vw 0.5vw #010020);
    overflow-y: scroll;
    padding: 1vw 2vw;
  }

  .story-nodes-container::-webkit-scrollbar {
    width: 0px;
  }

  .story-nodes-legend {
    text-align: center;
    padding: 2vw;
    font-size: 3vw;
    color: rgba(51, 226, 230, 0.9);
    filter: drop-shadow(0 0 1vw 5vw #33E2E6);
  }

  .story-node-tile {
    width: 35vw;
    padding: 1vw;
    margin: 1vw;
    margin-bottom: 2vw;
    background-color: rgba(51, 226, 230, 0.4);
    border: 0.05vw solid #33E2E6;
    border-radius: 1.5vw;
  }

  .story-node-title {
    padding-top: 0.5vw;
    padding-bottom: 0.5vw;
    text-align: center;
    white-space: wrap;
    width: 35vw;
    font-size: 2.5vw;
    line-height: 3vw;
    text-shadow: 0 0 0.1vw #010020;
  }

  .story-node-image {
    object-fit: cover;
    border: 0.05vw solid #33E2E6;
    border-radius: 1vw;
    width: 100%;
    height: 20vw;
  }

  .story {
    display: flex;
    flex-direction: column;
    width: 90%;
    margin: auto;
  }

  .legend {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    background-color: rgba(1, 0, 32, 0.6);
    -webkit-backdrop-filter: blur(1vw);
    backdrop-filter: blur(1vw);
    margin-top: 2vw;
    margin-bottom: -4vw;
    padding: 1.5vw;
    border: 0.1vw solid rgba(51, 226, 230, 0.5);
    border-radius: 2.5vw;
  }

  .header {
    font-size: 3vw;
    text-align: center;
    -webkit-text-stroke: 0.03vw #33E2E6;
    filter: drop-shadow(0 0 0.1vw #33E2E6);
    line-height: 1.6em;
    margin-bottom: 2vw;
  }

  .duration {
    font-size: 2vw;
    text-align: center;
    -webkit-text-stroke: 0.03vw #33E2E6;
    filter: drop-shadow(0 0 0.1vw #33E2E6);
    color: #bebebe;
  }

  .story-p {
    padding-bottom: 2vw;
  }

  .text {
    position: absolute;
    top: 10.1vw;
    width: 80.6vw;
    left: 7.7vw;
    overflow-y: scroll;
    height: 43.6vw;
    font-size: 2vw;
    line-height: 3vw;
    margin-bottom: auto;
    padding: 2vw;
    background-color: none;
    backdrop-filter: none;
    border: none;
    border-radius: auto;
    color: #bebebe;
    visibility: hidden;
  }

  .text::-webkit-scrollbar {
    width: 0.3vw;
    border: none;
  }

  .text::-webkit-scrollbar-track {
    background-color: rgba(0, 0, 0, 0.5);
  }

  .text::-webkit-scrollbar-thumb {
    background-color: rgba(51, 226, 230, 0.5);
    border-radius: 0.5vw;
  }

  .options {
    position: absolute;
    top: 59vw;
    width: 59.8vw;
    height: 23vw;
    white-space: nowrap;
    list-style: circle inside;
    margin: 2vw;
    margin-left: 2vw;
    margin-bottom: auto;
    padding-left: 3vw;
    padding-bottom: auto;
    font-size: 1.1em;
    line-height: 2em;
    overflow-y: hidden;
    background-color: none;
    backdrop-filter: none;
    border: none;
    border-radius: none;
  }

  .options::-webkit-scrollbar {
    height: 0.5vw;
  }

  .options::-webkit-scrollbar-track {
    background-color: rgba(0, 0, 0, 0);
  }

  .options::-webkit-scrollbar-thumb {
    background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(51, 226, 230, 0.5), rgba(0, 0, 0, 0));
    border-radius: 0.5vw;
  }

  .option {
    -webkit-text-stroke: 0.01vw #33E2E6;
    cursor: pointer;
  }

  .voting-ended {
    margin-top: 8vw;
    margin-bottom: -4vw;
    color: rgba(255, 255, 255, 0.5);
    text-align: center;
    font-size: 3vw;
    filter: drop-shadow(0 0 1vw 5vw #33E2E6);
    -webkit-text-stroke: 0.2vw rgba(51, 226, 230, 0.5);
  }


  @media only screen and (max-width: 600px) {
    .story-nodes-icon {
      width: 31.6vw;
      filter: drop-shadow(0 0.5vw 1vw #010020);
    }

    .story-nodes-legend {
      font-size: 5vw;
      padding: 3vw;
    }

    .story-node-tile {
      width: 86vw;
      margin: 4vw;
      margin-top: 0;
    }

    .story-node-title {
      padding-left: 2.5%;
      font-size: 1.2em;
      line-height: 1.5em;
      width: 95%;
    }

    .story-node-image {
      height: 50vw;
    }

    .story-nodes-container {
      width: 100vw;
      height: 80%;
      top: -80%;
      right: auto;
      left: 0;
      background-image: none;
    }

    .legend {
      margin-bottom: 2vw;
    }
    .header {
      font-size: 1.2em;
    }
    .duration {
      font-size: 1.1em;
    }
    .text {
      visibility: visible;
    }

    .voting-ended {
      font-size: 1.2em;
      margin-top: 0;
      margin-bottom: 0;
    }

    .text {
      position: static;
      top: auto;
      width: auto;
      left: auto;
      overflow-y: auto;
      height: auto;
      font-size: inherit;
      line-height: inherit;
      margin-bottom: 2vw;
      background-color: rgba(22, 30, 95, 0.75);
      -webkit-backdrop-filter: blur(2vw);
      backdrop-filter: blur(2vw);
      border: 0.1vw solid rgba(51, 226, 230, 0.5);
      border-radius: 2.5vw;
      padding: 3vw;
      visibility: visible;
    }

    .options {
      position: static;
      top: auto;
      width: 91vw;
      height: auto;
      font-size: 1.1em;
      white-space: wrap;
      margin-left: -2vw;
      margin-bottom: 4vw;
      background-color: rgba(1, 0, 32, 0.6);
      -webkit-backdrop-filter: blur(1vw);
      backdrop-filter: blur(1vw);
      border: 0.1vw solid rgba(51, 226, 230, 0.5);
      border-radius: 2.5vw;
      padding-top: 2vw;
      padding-bottom: 2vw;
    }
  }
</style>